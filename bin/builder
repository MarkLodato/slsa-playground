#!/usr/bin/env python3
"""SLSA Playground mock builder

Simulates a SLSA-compliant CI/CD build for `git+https://<url>@<version>`:
-   git clone `https://<url>` to directory `<cache-dir>/<url>` and checkout
    branch/tag `<version>`
-   run `python3 setup.py sdist`, which is expected to generate `dist/*.tar.gz`
-   generate fake SLSA provenance for `dist/*.tar.gz`, written to same directory

Example usage:

    bin/builder git+https://github.com/psf/requests@v2.31.0

This will produce:

    cache/github.com/psf/requests/dist/requests-2.31.0.tar.gz
    cache/github.com/psf/requests/dist/requests-2.31.0.tar.gz.intoto.jsonl
"""

import argparse
import base64
import hashlib
import json
import os
import pathlib
import re
import shutil
import subprocess
import sys

from typing import List


def main():
    parser = argparse.ArgumentParser(
        description=__doc__.partition("\n\n")[2],
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "url",
        help="URL to build of the form `git+<https-url>@<version>",
        type=GitUrl,
    )
    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        help="Delete existing output files",
    )
    parser.add_argument(
        "--use-existing",
        action="store_true",
        help="Use existing output files (for debugging only)",
    )
    parser.add_argument(
        "--cache-dir",
        help="Cache directory for storing the git clone (default: ./cache/)",
        type=pathlib.Path,
        default="cache",
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        help="Output directory for writing the final output artifacts(default: ./built/)",
        type=pathlib.Path,
        default="built",
    )
    parser.add_argument(
        "-b",
        "--builder",
        default="MyBuilder",
        help="Sets the Builder's identity, used for signing",
    )
    args = parser.parse_args()
    source_dir = fetch(args.url, args.cache_dir)
    build(
        source_dir,
        args.output_dir,
        args.url,
        args.force,
        args.use_existing,
        args.builder,
    )


class GitUrl:
    url_without_https: str
    version: str
    https_url: str
    full: str

    def __init__(self, value: str):
        m = re.match(r"^git\+https://(.*)@(.*)$", value)
        if not m:
            raise Exception("URL must be of the form `git+https://...@...`")
        self.url_without_https, self.version = m.groups()
        self.https_url = "https://" + self.url_without_https
        self.full = value

    def __repr__(self):
        return "GitUrl('%s')" % self.full


def fetch(url: GitUrl, cache_dir: pathlib.Path) -> str:
    """Clones `url` if it does not exist in the cache, or checks out `url.version` if it does.

    Returns the clone directory."""
    source_dir = cache_dir / url.url_without_https
    print(60 * "-")
    print("Cloning", url.https_url, "@", url.version, "to", source_dir)
    print(60 * "-")
    if not source_dir.exists() or not list(source_dir.iterdir()):
        source_dir.mkdir(parents=True, exist_ok=True)
        subprocess.run(
            [
                "git",
                "clone",
                url.https_url,
                str(source_dir),
                "-b",
                url.version,
            ]
        )
    else:
        subprocess.run(["git", "checkout", url.version], cwd=source_dir)
    return source_dir


def build(
    source_dir: pathlib.Path,
    output_dir: pathlib.Path,
    url: GitUrl,
    force: bool,
    use_existing: bool,
    builder: str,
) -> None:
    print()
    print(60 * "-")
    print("Building", url.https_url, "@", url.version, "from", source_dir)
    print(60 * "-")
    temp_build_dir = source_dir / "dist"
    GLOB_PATTERN = "*.tar.gz"
    existing_files = sorted(temp_build_dir.glob(GLOB_PATTERN))
    if existing_files and not use_existing:
        if force:
            print("Deleting existing files due to -f flag")
            for path in existing_files:
                print("deleting", path)
                path.unlink()
            existing_files = []
        else:
            raise Exception(
                f"{temp_build_dir} is not empty; please clean it before running or run with -f"
            )
    if existing_files:
        print("Using existing files due to --use-existing flag")
        temp_output_files = existing_files
    else:
        subprocess.run(["python3", "setup.py", "sdist"], cwd=source_dir)
        temp_output_files = sorted(temp_build_dir.glob(GLOB_PATTERN))
        if not temp_output_files:
            raise Exception(f"no output files: {temp_build_dir} is empty")
    output_dir.mkdir(parents=True, exist_ok=True)
    output_files = []
    for file in temp_output_files:
        o = output_dir / file.name
        if o.exists() and not force:
            raise Exception(f"{o} exists; run with -f to overwrite")
        shutil.copy(file, o)
        print("Writing", o)
        output_files.append(o)

    print()
    print(60 * "-")
    print("Generating provenance for:", " ".join(x.name for x in output_files))
    print(60 * "-")
    statement = {
        "_type": "https://in-toto.io/Statement/v1",
        "subject": [
            {
                "name": path.name,
                "digest": {
                    "sha256": hashlib.sha256(path.read_bytes()).hexdigest(),
                },
            }
            for path in output_files
        ],
        "predicateType": "https://slsa.dev/provenance/v1",
        "predicate": {
            "buildDefinition": {
                "buildType": "https://example.com/PythonBuild",
                "externalParameters": {
                    "sourceRepo": url.full,
                },
            },
            "runDetails": {
                "builder": {
                    "id": f"https://example.com/{builder}",
                },
            },
        },
    }
    payload_type = "application/vnd.in-toto+json"
    payload = json.dumps(statement).encode("utf-8")
    envelope = {
        "payload": b64enc(payload),
        "payloadType": payload_type,
        "signatures": [
            {
                "keyid": builder,
                "sig": b64enc(raw_sign(PAE(payload_type, payload), builder)),
            }
        ],
    }
    print("Statement:")
    print(json.dumps(statement, indent=2))
    print("Envelope:")
    print(json.dumps(envelope, indent=2))
    for path in output_files:
        json_filename = path.parent / (path.name + ".intoto.jsonl")
        print("Writing", json_filename)
        with open(json_filename, "w") as f:
            json.dump(envelope, f)
            f.write("\n")


def raw_sign(message: bytes, keyid: str) -> bytes:
    """Creates a dummy signature using keyid identity. Not secure!!!"""
    hasher = hashlib.sha256()
    hasher.update(b"Fake signature\n")
    hasher.update(keyid.encode("utf-8"))
    hasher.update(b"\n")
    hasher.update(message)
    return hasher.digest()


def b64enc(m: bytes) -> str:
    return base64.standard_b64encode(m).decode("utf-8")


def PAE(payloadType: str, payload: bytes) -> bytes:
    return b"DSSEv1 %d %b %d %b" % (
        len(payloadType),
        payloadType.encode("utf-8"),
        len(payload),
        payload,
    )


if __name__ == "__main__":
    main()
